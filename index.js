// Generated by CoffeeScript 1.10.0
(function() {
  var canvas, ctx, key, map, options, plotSimulation, redraw, runSimulation, val;

  canvas = document.querySelector('canvas');

  ctx = canvas.getContext('2d');

  runSimulation = function(opts) {
    var constantForce, dampingForce, drivingForce, history, netForce, springForce, t, v, x;
    if (opts.timeStep === 0) {
      return;
    }
    t = opts.timeStart;
    x = opts.initialX;
    v = opts.initialV;
    history = [];
    while (!(t >= opts.timeEnd)) {
      t += opts.timeStep;
      springForce = -x * opts.springConstant;
      constantForce = opts.constantForce;
      dampingForce = -v * opts.dampingConstant;
      drivingForce = opts.drivingForce * Math.sin(t * opts.drivingFrequency);
      netForce = springForce + constantForce + dampingForce + drivingForce;
      v += (netForce / opts.mass) * opts.timeStep;
      x += v * opts.timeStep;
      history.push({
        t: t,
        x: x,
        v: v
      });
    }
    return history;
  };

  map = function(value, from, to) {
    return ((value - from[0]) / (from[1] - from[0])) * (to[1] - to[0]) + to[0];
  };

  plotSimulation = function(history) {
    var canvasHeight, canvasWidth, element, i, len, trange, vrange, xrange;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    trange = [
      Math.min.apply(this, history.map(function(x) {
        return x.t;
      })), Math.max.apply(this, history.map(function(x) {
        return x.t;
      }))
    ];
    xrange = [
      Math.min.apply(this, history.map(function(x) {
        return x.x;
      })), Math.max.apply(this, history.map(function(x) {
        return x.x;
      }))
    ];
    vrange = [
      Math.min.apply(this, history.map(function(x) {
        return x.v;
      })), Math.max.apply(this, history.map(function(x) {
        return x.v;
      }))
    ];
    canvasHeight = [0, canvas.height];
    canvasWidth = [0, canvas.width];
    ctx.beginPath();
    ctx.moveTo(map(history[0].t, trange, canvasWidth), map(history[0].x, xrange, canvasHeight));
    for (i = 0, len = history.length; i < len; i++) {
      element = history[i];
      ctx.lineTo(map(element.t, trange, canvasWidth), map(element.x, xrange, canvasHeight));
    }
    ctx.strokeStyle = '#00F';
    return ctx.stroke();
  };

  options = {
    timeStart: 'time-start',
    springConstant: 'spring-constant',
    constantForce: 'constant-force',
    dampingConstant: 'damping-constant',
    drivingForce: 'driving-force',
    drivingFrequency: 'driving-frequency',
    mass: 'mass',
    timeStart: 'time-start',
    timeEnd: 'time-end',
    timeStep: 'time-step',
    initialX: 'initial-x',
    initialV: 'initial-v'
  };

  redraw = function() {
    var key, opts, val;
    opts = {};
    for (key in options) {
      val = options[key];
      opts[key] = Number(val.value);
      if (isNaN(opts[key])) {
        return;
      }
    }
    return plotSimulation(runSimulation(opts));
  };

  for (key in options) {
    val = options[key];
    options[key] = document.getElementById(val);
    options[key].addEventListener('input', redraw);
  }

  redraw();

}).call(this);
